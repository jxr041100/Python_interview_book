

def find_pivot(nums):    
    i = len(nums)-1
    while i > 0 and nums[i-1] >= num[i]:
        i -= 1
    return i

def find_successor(nums, pivot):
    j = len(nums) - 1
    while nums[pivot] >= nums[j]:
        j -= 1    
    assert j > pivot        
    return j        

def reverse(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        if len(nums) < 2:
            return
        i = find_pivot(nums)
        if i < 0:
            nums.sort()
        else:
            j = find_successor(nums, i)
            nums[i], nums[j] = nums[j], nums[i]
            reverse(nums, i+1, len(nums)-1)
