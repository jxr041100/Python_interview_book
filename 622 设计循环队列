
'''
设计循环队列的实现。 循环队列是一种线性数据结构，其中的操作是基于FIFO（先进先出）原理执行的，最后一个位置又连接回第一个位置以构成一个圆。 也称为“环形缓冲区”。
循环队列的好处之一是可以利用队列前面的空间。 在普通队列中，一旦队列已满，即使队列前面有空格，也无法插入下一个元素。 但是使用循环队列，可以使用空间来存储新值。
'''
class MyCircularQueue:
    
    def __init__(self, k: int):
        """
        在此初始化您的数据结构。 将队列的大小设置为k。
        """
        self.data = [0]*k
        self.head = self.tail = 0        

    def enQueue(self, value: int) -> bool:
        """
        将元素插入循环队列。 如果操作成功，则返回true。
        """
        if self.isFull(): return False 
        self.data[self.tail % len(self.data)] = value
        self.tail += 1
        return True

    def deQueue(self) -> bool:
        """
        从循环队列中删除一个元素。 如果操作成功，则返回true。
        """
        if self.isEmpty(): return False 
        self.head += 1
        return True

    def Front(self) -> int:
        """
        从队列中获取最前面的项目。
        """
        if self.isEmpty(): return -1
        return self.data[self.head % len(self.data)]

    def Rear(self) -> int:
        """
        从队列中获取最后一个项目。
        """
        if self.isEmpty(): return -1
        return self.data[(self.tail-1)%len(self.data)]

    def isEmpty(self) -> bool:
        """
        检查循环队列是否为空。
        """
        return self.head == self.tail

    def isFull(self) -> bool:
        """
        检查循环队列是否已满。
        """
        return self.tail - self.head == len(self.data)
