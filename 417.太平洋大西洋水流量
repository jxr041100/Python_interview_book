"""广度遍历"""

from collections import deque
class Solution:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix:
            return []
        pacificSeen = set()
        pacificQueue = deque()
        for y in range(len(matrix)):
            pacificSeen.add((y, 0))
            pacificQueue.append((y, 0))
        for x in range(1, len(matrix[0])):
            pacificSeen.add((0, x))
            pacificQueue.append((0, x))
        
        atlanticSeen = set()
        atlanticQueue = deque()
        for y in range(len(matrix)):
            atlanticSeen.add((y, len(matrix[0])-1))
            atlanticQueue.append((y, len(matrix[0])-1))
        for x in range(0, len(matrix[0]) - 1):
            atlanticSeen.add((len(matrix)-1, x))
            atlanticQueue.append((len(matrix)-1, x))
        
        self.bfs(matrix, pacificQueue, pacificSeen)
        self.bfs(matrix, atlanticQueue, atlanticSeen)
        
        both = pacificSeen & atlanticSeen
        return [list(point) for point in both]
        
        
    def bfs(self, matrix, queue, seen):
        while queue:
            y, x = queue.popleft()
            dirs = ((0,1), (0, -1), (1, 0), (-1, 0))
            for dy, dx in dirs:
                if not (0 <= y+dy < len(matrix)) or not(0 <= x+dx < len(matrix[0])):
                    continue
                if (y+dy, x+dx) in seen:
                    continue
                if matrix[y+dy][x+dx] < matrix[y][x]:
                    continue                
                seen.add((y+dy, x+dx))                    
                queue.append((y+dy, x+dx))
                
                
       """深度遍历""""
       class Solution:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        if not matrix or not matrix[0]:
            return []
        R, C = len(matrix), len(matrix[0])
        pacific, atlantic = set(), set()
        def dfs(r, c, seen):
            if (r, c) in seen:
                return
            seen.add((r, c))
            for nr, nc in ((r, c+1), (r, c-1), (r+1, c), (r-1, c)):
                # 下一个点要高于当前点
                if 0 <= nr < R and 0 <= nc < C and matrix[nr][nc] >= matrix[r][c]:
                    dfs(nr, nc, seen)
        for r, c in [(r, 0) for r in range(R)] + [(0, c) for c in range(C)]:
            dfs(r, c, pacific)
        for r, c in [(r, C-1) for r in range(R)] + [(R-1, c) for c in range(C)]:
            dfs(r, c, atlantic)
        return pacific & atlantic   
